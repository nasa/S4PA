=head1 NAME

S4PA::Media - S4PA subsystem to handle media orders 

=head1 SYNOPSIS

  use S4PA::Media;
  $status = S4PA::Media::ReadMedReq( $media_root, $order_id, $request_file, $ftp_host );
  $status = S4PA::Media::WritePhysMed( $media_root, $order_id, $verify_dvd );
  $status = S4PA::Media::CleanMedReq( $media_root, $order_id );

=head1 DESCRIPTION

The set of functions to implement DVD media production. These primarily
interface with utility s4pa_write_physical_media.pl which coordinates
the production of DVD media under S4PA and is the tool that is used by
User Services to generate DVD media.

=head1 SEE ALSO

L<S4PA>, L<S4PA::Storage>, L<S4PA::Receiving>

=cut

################################################################################
# $Id: Media.pm,v 1.1.1.1 2006/03/08 12:31:19 hegde Exp $
# -@@@ S4PA, Version $Name:  $
################################################################################

package S4PA::Media;

use 5.00503;
use strict;
use File::Basename;

use vars qw($VERSION);

$VERSION = '0.01';

1;


################################################################################
################################## ReadMedReq ##################################
################################################################################

=head1 ReadMedReq

Initiates the DVD media write process. Creates a temporary directory for
processing the media order (in /<media_root>/<order_id>, reads the DVD media 
request file named in <request_file>, determines the files to be written, 
verifies that the request files are available, and generates an invoice 
(written as invoice_<order_id> in the temporary directory). The request file 
can be a WHOM-generated FTP file or an ordinary list of fully qualified file 
specifications. If the request file is a WHOM-generated FTP file AND the
files reside on a machine other than the host, then the FTP script is run,
thereby making the request files available in the temporary directory. 
Otherwise, soft links to the actual files are created in the temporary 
directory.

    $status = S4PA::Media::ReadMedReq( $media_root, $order_id, $request_file, $ftp_host );

Algorithm:

    Function
        Unless the media scratch directory already exists
            Create the media scratch directory using the order ID
        Read the media request file
        Determine request type: WHOM-generated or Text Editor-generated
        If WHOM-generated request And host differs from FTP host Then
            Execute the WHOM-generated FTP request file
            Extract all FTP get command lines from the request file
            For Each FTP get command in the request file Do
                Extract imbedded file name
                Verify that the request file is in the scratch directory
            End
        Else If WHOM-generated request And host same as FTP host Then
            Extract all FTP get command lines from the request file
            For Each FTP get command in the request file Do
                Extract imbedded file name
                Verify that the request file exists
                Make soft links to request file in scratch directory
            End
        Else If Text Editor-generated request file Then
            For Each line in the request file Do
                Extract imbedded file name
                Verify that the request file exists
                Make soft links to request file in scratch directory
            End
        End
        Generate the media invoice in the root media scratch directory
        Move media invoice to media scratch directory
        Open file protections media scratch directory contents
    End

Input:

    media_root          Media scratch root directory.
    order_id            A unique order identifier.
    request_file        Request file specification, generated by WHOM or a 
                        text editor, containing a list of fully qualified 
                        file names to be written to DVD.
    ftp_host            Host machine from which media files are to be FTPed
                        by a WHOM-generated request file.

=head1 AUTHOR

Robert Kummerer

=cut

sub ReadMedReq {

   my $media_root   = shift;
   my $order_id     = shift;
   my $request_file = shift;
   my $ftp_host     = shift;

   my @allLines;
   my $cmd;
   my $cnt;
   my $destFile;
   my $dir;
   my $ext;
   my $file;
   my $filename;
   my $get;
   my @getFiles = ();
   my $line;
   my @localhost;
   my @requestFiles = ();
   my $srcFile;
   my $status;
   my $whomFtpScript;

   my $media_dir      = "$media_root/$order_id";
   my $localhost_file = "/tmp/localhost.$order_id.tmp";


   #############################################################################
   # Prepare the media scratch directory.
   #############################################################################

   # Abort processing if the media scratch directory exists.
   if ( -e "$media_dir" ) {
      S4P::logger("ERROR","Found a media scratch directory for order ID $order_id: $media_dir.\n");
      return 1;
   }

   # Create the media scratch directory.
   $cmd = "mkdir -p $media_dir";

   $status = system( $cmd );

   if ( $status ) {
      S4P::logger("ERROR","Unable to create the media scratch directory: $media_dir.\nSystem Error Message: $!\n");
      return 1;
   } else {
      S4P::logger("INFO","Successfully executed \"$cmd\".\n");
   }

   # Change directory to the media scratch directory.
   unless( chdir( $media_dir ) ) {
      S4P::logger("ERROR","Unable to change directory to the media scratch directory: $media_dir.\nSystem Error Message: $!\n");
      $status = system( "rm -rf $media_dir" );
      return 1;
   }


   #############################################################################
   # Determine the local host.
   #############################################################################

   # Invoke uname, directing the output to a temporary file.
   $cmd = "uname -n > $localhost_file";

   $status = system( $cmd );

   if ( $status ) {
      S4P::logger("ERROR","Unable to write the local host temporary file.\nSystem Error Message: $!\n");
      $status = system( "rm -rf $media_dir" );
      return 1;
   } else {
      S4P::logger("INFO","Successfully executed \"$cmd\".\n");
   }

   # Read the local host from the temporary file.
   unless( open( LHF, "$localhost_file" ) ) {
      S4P::logger("ERROR","Unable to open the local host temporary file: $localhost_file.\nSystem Error Message: $!\n");
      $status = system( "rm -rf $media_dir" );
      return 1;
   }

   unless( @localhost = <LHF> ) {
      S4P::logger("ERROR","Unable to read the local host temporary file: $localhost_file.\nSystem Error Message: $!\n");
      $status = system( "rm -rf $media_dir" );
      return 1;
   }

   unless( close( LHF ) ) {
      S4P::logger("WARNING","Could not close the local host temporary file: $localhost_file.\nSystem Error Message: $!\n");
   }

   # Remove carriage return line feed from local host name.
   chop($localhost[0]);

   # Remove the local host temporary file.
   $cmd = "rm -rf $localhost_file";

   $status = system( $cmd );

   if ( $status ) {
      S4P::logger("ERROR","Unable to remove the local host temporary file.\nSystem Error Message: $!\n");
      $status = system( "rm -rf $media_dir" );
      return 1;
   } else {
      S4P::logger("INFO","Successfully executed \"$cmd\".\n");
   }


   #############################################################################
   # Read the media request file. Determine if the request is WHOM-generated.
   #############################################################################

   unless( open( REQUEST, "$request_file" ) ) {
      S4P::logger("ERROR","Unable to open the media request file: $request_file.\nSystem Error Message: $!\n");
      $status = system( "rm -rf $media_dir" );
      return 1;
   }

   unless( @allLines = <REQUEST> ) {
      S4P::logger("ERROR","Unable to read the media request file: $request_file.\nSystem Error Message: $!\n");
      $status = system( "rm -rf $media_dir" );
      return 1;
   }

   unless( close( REQUEST ) ) {
      S4P::logger("WARNING","Could not close the the media request file: $request_file.\nSystem Error Message: $!\n");
   }

   S4P::logger("INFO","Read the following media request file:\n");
   foreach $line ( @allLines ) {
      chop($line);				# Remove carriage return line feed.
      S4P::logger("INFO","    $line\n");
   }

   $whomFtpScript = grep /bye/, @allLines;


   #############################################################################
   # Process the media request.
   #############################################################################

   if ( $whomFtpScript && ($localhost[0] ne $ftp_host) ) {

      ##########################################################################
      # Processing a WHOM-generated FTP script that requires FTP.
      ##########################################################################

      S4P::logger("INFO","Processing a WHOM-generated media request file.\n");

      # Invoke the FTP script.
      $cmd = "ftp $ftp_host < $request_file";
 
      $status = system( $cmd );

      if ( $status ) {
         S4P::logger("ERROR","Unable to process the WHOM-generated FTP file: $request_file.\nSystem Error Message: $!\n");
         $status = system( "rm -rf $media_dir" );
         return 1;
      } else {
         S4P::logger("INFO","Successfully submitted FTP script for processing: \"$cmd\".\n");
      }

      #############################################################################
      # Verify that all expected request files have been FTPed.
      #############################################################################

      S4P::logger("INFO","Extracted the following request files:\n");

      # Extract the FTP get commands from the request file.
      @getFiles = grep /get/, @allLines;

      # Extract FTP get command contents. Confirm that all files have been FTPed.
      # FTP get command format: 'get <source file> <destination file>'.
      foreach $line ( @getFiles ) {

         # Preprocess FTP get command line contents.
         $line =~ s/^\s*(.*?)\s*$/$1/;		# Trim leading white space.
         $line =~ s/\s+/ /g;			# 'Collapse internal whitespace'.
         $cnt = $line =~ tr/ / /;		# Count the number of ' ' in line.

         # There should be 2 files specified in the FTP get command.
         if ( $cnt != 2 ) {
            S4P::logger("ERROR","Failed to successfully extract file specifications from the WHOM-generated media request file $request_file on line = $line.\n");
            $status = system( "rm -rf $media_dir" );
            return 1;
         }

         # Extract FTP get command line contents.
         ($get, $srcFile, $destFile) = split( / /, $line, 3);

         # Confirm that the file has been FTPed.
         $filename = "$media_dir/$destFile";

         if ( !-e "$filename" ) {
            S4P::logger("ERROR","Failed to properly execute the WHOM-generated media request file $request_file.\n");
            $status = system( "rm -rf $media_dir" );
            return 1;
         }

         S4P::logger("INFO","    $filename\n");
      }

   } elsif ( $whomFtpScript && ($localhost[0] eq $ftp_host) ) {

      ##########################################################################
      # Processing a WHOM-generated FTP script that does not require FTP.
      ##########################################################################

      S4P::logger("INFO","Processing a WHOM-generated media request file.\n");

      #############################################################################
      # Verify that all expected request files exist.
      #############################################################################

      S4P::logger("INFO","Extracted the following request files:\n");

      # Extract the FTP get commands from the request file.
      @getFiles = grep /get/, @allLines;

      # Extract FTP get command contents. Confirm that all files have been FTPed.
      # FTP get command format: 'get <source file> <destination file>'.
      foreach $line ( @getFiles ) {

         # Preprocess FTP get command line contents.
         $line =~ s/^\s*(.*?)\s*$/$1/;          # Trim leading white space.
         $line =~ s/\s+/ /g;                    # 'Collapse internal whitespace'.
         $cnt = $line =~ tr/ / /;               # Count the number of ' ' in line.

         # There should be 2 files specified in the FTP get command.
         if ( $cnt != 2 ) {
            S4P::logger("ERROR","Failed to successfully extract file specifications from the WHOM-generated media request file $request_file on line = $line.\n");
            $status = system( "rm -rf $media_dir" );
            return 1;
         }

         # Extract FTP get command line contents.
         ($get, $srcFile, $destFile) = split( / /, $line, 3);

         # Confirm that the file exists.
         if ( !-e "$srcFile" ) {
            S4P::logger("ERROR","Unrecognized or nonexistent file specification in $request_file: $srcFile\n");
            $status = system( "rm -rf $media_dir" );
            return 1;
         }

         # Make soft links to the request files in the media scratch directory.
         ($file, $dir, $ext) = fileparse( $srcFile );
         unless( symlink( "$srcFile", "$media_dir/$file" ) ) {
            S4P::logger("ERROR","Unable to make the soft link in the media scratch directory to the request file: $media_dir/$srcFile\nSystem Error Message: $!\n");
            return 1;
         }

         S4P::logger("INFO","    $srcFile\n");
      }

      S4P::logger("INFO","Successfully created soft links from the media scratch directory to the request files.\n");

   } else {

      ##########################################################################
      # Processing an editor-generated list of files.
      ##########################################################################

      S4P::logger("INFO","Processing an editor-generated media request file.\n");

      # Extract the names of files to be written to DVD from the request file.
      foreach $line ( @allLines ) {
         $line =~ s/^\s*(.*?)\s*$/$1/;		# Trim leading white space.
         if ( -e "$line" ) {			# Expect a lone file spec.
            push( @requestFiles, "$line" );
         } else {				# An unrecognized file spec.
            S4P::logger("ERROR","Unrecognized or nonexistent file specification in $request_file: $line\n");
            $status = system( "rm -rf $media_dir" );
            return 1;
         }
      }

      #############################################################################
      # Make soft links to the request files in the media scratch directory.
      #############################################################################

      S4P::logger("INFO","Extracted the following request files:\n");

      foreach $filename (@requestFiles) {
         ($file, $dir, $ext) = fileparse( $filename );
         unless( symlink( "$filename", "$media_dir/$file" ) ) {
            S4P::logger("ERROR","Unable to make the soft link in the media scratch directory to the request file: $media_dir/$file\nSystem Error Message: $!\n");
            return 1;
         }
         S4P::logger("INFO","    $filename\n");
      }

      S4P::logger("INFO","Successfully created soft links from the media scratch directory to the request files.\n");

   }	# if ( $whomFtpScript ) { ...


   #############################################################################
   # Produce the invoice.
   #############################################################################

   $cmd = "ls -Ll $media_dir > $media_root/invoice_$order_id";

   $status = system( $cmd );

   if ( $status ) {
      S4P::logger("ERROR","Unable to produce the media invoice.\nSystem Error Message: $!\n");
      $status = system( "rm -rf $media_dir" );
      return 1;
   } else {
      S4P::logger("INFO","Successfully executed \"$cmd\".\n");
   }   


   #############################################################################
   # Move the invoice to the media scratch directory.
   #############################################################################

   $cmd = "mv $media_root/invoice_$order_id $media_dir";

   $status = system( $cmd );

   if ( $status ) {
      S4P::logger("ERROR","Unable to move the invoice media scratch directory.\nSystem Error Message: $!\n");
      $status = system( "rm -rf $media_dir" );
      return 1;
   } else {
      S4P::logger("INFO","Successfully executed \"$cmd\".\n");
   }


   #############################################################################
   # Open file protections on the contents of the media scratch directory.
   #############################################################################

   $cmd = "chmod -R 766 $media_dir";

   $status = system( $cmd );

   if ( $status ) {
      S4P::logger("ERROR","Unable to change file protection on media scratch directory: $media_dir.\nSystem Error Message: $!\n");
      $status = system( "rm -rf $media_dir" );
      return 1;
   } else {
      S4P::logger("INFO","Successfully executed \"$cmd\".\n");
   }


   #############################################################################
   # Clean-up and exit.
   #############################################################################

   return 0;
}



################################################################################
################################# WritePhysMed #################################
################################################################################

=head1 WritePhysMed

Write the contents of the temporary directory to DVD media. COTS utility
sdvdbackup writes the DVD found on device drive /dev/dvd. Utility sdvdbackup
is configured to write to this drive at installation time; this cannot be
overridden at run-time. The contents of the entire directory tree (that
found in /<media_root>/<order_id>) is written to DVD. Soft linked data files 
are replaced with the actual files on DVD. The contents of the DVD can be
verified when the write is completed.

    $status = S4PA::Media::WritePhysMed( $media_root, $order_id, $verify_dvd );

Algorithm:

    Function
        Verify media order preprocessing has completed
        Call sdvdbackup to write media scratch directory contents to DVD
        if DVD verification enabled then
           Call sdvdbackup_verify to verify the contents of each DVD
    End

Input:

    media_root          Media scratch root directory.
    order_id            A unique order identifier.
    verify_dvd          Enables or disables DVD verification.

=head1 AUTHOR

Robert Kummerer

=cut

sub WritePhysMed {

   my $media_root = shift;
   my $order_id   = shift;
   my $verify_dvd = shift;

   my $cmd;
   my $i;
   my $line;
   my $status;
   my $volume_count;

   my $media_dir = "$media_root/$order_id";


   #############################################################################
   # Write the contents of the media scratch directory to DVD.
   #############################################################################

   $cmd = "sdvdbackup -follow_symbolic_links on $media_dir";

   $status = system( $cmd );

   if ( $status ) {
      S4P::logger("ERROR","Unable to write the DVD media.\nSystem Error Message: $!\n");
      return 1;
   } else {
      S4P::logger("INFO","Successfully executed \"$cmd\".\n");
   }


   #############################################################################
   # Determine the number of DVD volumes written in preparation for verifying 
   # their contents.
   #############################################################################

   if ( $verify_dvd eq "ON" ) {

      $cmd = "sdvdbackup -last_volume_count > $media_dir/$order_id.vc";
   
      $status = system( $cmd );
   
      if ( $status ) {
         S4P::logger("ERROR","Unable to determine the number of volumes written.\nSystem Error Message: $!\n");
         return 1;
      } else {
         S4P::logger("INFO","Successfully executed \"$cmd\".\n");
      }
   
      unless( open (VC_FILE, "$media_dir/$order_id.vc" ) ) {
         S4P::logger("ERROR","Could not open the volume count scratch file: media_dir/$order_id.vc.\nSystem Error Message: $!\n") ;
         return 1;
      }
   
      $volume_count = <VC_FILE>;		# Read the only line in the file.
      chop($volume_count);			# Remove carriage return line feed.
   
      unless( open (VC_FILE, "$media_dir/$order_id.vc" ) ) {
         S4P::logger("WARNING","Could not close the volume count scratch file: media_dir/$order_id.vc.\nSystem Error Message: $!\n") ;
      }
   
      S4P::logger("INFO","The number of DVD volumes written: $volume_count\n");
   }


   #############################################################################
   # Verify the contents of the DVD(s) just written.
   #############################################################################

   if ( $verify_dvd eq "ON" ) {

      foreach ( $i=1; $i<=$volume_count; $i++ ) {
         print "\n";
         print "insert DVD $i of $volume_count for verification and press Enter";
         getc;
   
         $cmd = "sdvdbackup_verify /dev/dvd $i" . "_" . $volume_count;
   
         $status = system( $cmd );
   
         if ( $status ) {
            S4P::logger("ERROR","Unable to verify the contents of DVD volume $i.\nSystem Error Message: $!\n");
            return 1;
         } else {
            S4P::logger("INFO","Successfully executed \"$cmd\".\n");
         }
      }
   }

   #############################################################################
   # Clean-up and exit.
   #############################################################################

   return 0;
}


################################################################################
################################# CleanMedReq ##################################
################################################################################

=head1 CleanMedReq

Cleans-up after the DVD media write process. Deletes the temporary directory
and soft links or data files produced while processing the DVD media order.

    $status = S4PA::Media::CleanMedReq( $media_root, $order_id );

Algorithm:

    Function
        Remove the invoice from the root media scratch directory
        Remove media scratch directory
    End

Input:

    media_root          Media scratch root directory.
    order_id            A unique order identifier.

=head1 AUTHOR

Robert Kummerer

=cut

sub CleanMedReq {

   my $media_root = shift;
   my $order_id   = shift;

   my $cmd;
   my $status;

   my $media_dir  = "$media_root/$order_id";


   #############################################################################
   # Remove the invoice if it happens to not have been moved to the media
   # scratch directory.
   #############################################################################

   if ( -e "$media_root/invoice_$order_id" ) {

      $cmd = "rm -rf $media_root/invoice_$order_id";

      $status = system( $cmd );
   
      if ( $status ) {
         S4P::logger("ERROR","Unable to remove the media invoice: $media_root/invoice_$order_id.\nSystem Error Message: $!\n");
         return 1;
      } else {
         S4P::logger("INFO","Successfully executed \"$cmd\".\n");
      }
   }


   #############################################################################
   # Remove the media scratch directory.
   #############################################################################

   if ( -e "$media_dir" ) {

      $cmd = "rm -rf $media_dir";

      $status = system( $cmd );

      if ( $status ) {
         S4P::logger("ERROR","Unable to remove the media scratch directory: $media_dir.\nSystem Error Message: $!\n");
         return 1;
      } else {
         S4P::logger("INFO","Successfully executed \"$cmd\".\n");
      }
   }


   #############################################################################
   # Clean-up and exit.
   #############################################################################

   return 0;
}
